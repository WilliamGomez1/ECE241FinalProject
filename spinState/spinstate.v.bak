module SpinState(SW, LEDR, KEY, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, CLOCK_50);
    //inputs
    input [9:0] SW;
    input [3:0] KEY;
    input CLOCK_50;

    //outputs
    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
    output [9:0] LEDR;

   
    //wires inputs to FSM
    wire StopKey = KEY[0];
wire spin = KEY[1];
    wire hot1, hot2, hot3, hot4; // remember these are logic zeros
   
    //outputs of FSM
    wire [3:0] loadPlayerSpin;
    wire [11:0] PlayerSpin; //This is the player spun number output from the spinState module

    //function calls
   
    //FSM of spin state
    spinStateFSM U0 (CLOCK_50, StopKey, done, hot1, hot2, hot3, hot4);
   
       wire [3:0] PlayerSpin1 = (hot1) ? loadPlayerSpin : 4'b0;
       wire [3:0] PlayerSpin2 = (hot2) ? loadPlayerSpin : 4'b0;
       wire [3:0] PlayerSpin3 = (hot3) ? loadPlayerSpin : 4'b0;
   

hexadecimalDecoder U2 (PlayerSpin[3:0], HEX2);
hexadecimalDecoder U3 (PlayerSpin[7:4], HEX1);
hexadecimalDecoder U4 (PlayerSpin[3:0], HEX0);

assign PlayerSpin[3:0] = PlayerSpin1;
assign PlayerSpin[7:4] = PlayerSpin2;
assign PlayerSpin[11:8] = PlayerSpin3;
   
endmodule

module spinStateFSM (
    input CLOCK_50,
    input StopKey,
    input [3:0] Clawk,          // Clawk represents the input for the spin case
    output reg [3:0] PlayerSpin, // PlayerSpin stores the spin result
    output reg [3:0] loadPlayerSpin,
    input hot2, hot3, hot4       // Signals indicating when to load PlayerSpin
);

reg [3:0] y_Q, Y_D; // y_Q = current state, Y_D = next state
    parameter    
        None  = 4'b0001,
        Once  = 4'b0010,
        Twice = 4'b0100,
        Done  = 4'b1000;
 
    always @(*) begin
        // Default values to prevent latches
        Y_D = None;
        doneFlag = 0;
        hot1 = 0;
        hot2 = 0;
        hot3 = 0;
        hot4 = 0;

        // Assign hot state indicators based on the current state
        case (y_Q)
            None: begin
                hot1 = 1;
                if (!StopKey)
                    Y_D = Once;
                else
                    Y_D = None;
            end
            Once: begin
                hot2 = 1;
                if (!StopKey)
                    Y_D = Twice;
                else
                    Y_D = Once;
            end
            Twice: begin
                hot3 = 1;
                if (!StopKey) begin
                    Y_D = Done;
                    doneFlag = 1;
                end else
                    Y_D = Twice;
            end
            Done: begin
                hot4 = 1;
                if (!StopKey)
                    Y_D = None;
                else
                    Y_D = Done;
            end
            default: begin
                Y_D = None;
                doneFlag = 0;
            end
        endcase
    end

    always @(posedge CLOCK_50) begin
        if (StopKey)
            y_Q <= None;
        else
            y_Q <= Y_D;
    end
endmodule

    parameter
        ZERO = 4'b0000,
        ONE  = 4'b0001,
        TWO  = 4'b0010,
        THREE = 4'b0011,
        FOUR = 4'b0100,
        FIVE = 4'b0101,
        SIX  = 4'b0110,
        SEVEN = 4'b0111,
        ATE = 4'b1000,
        NINE = 4'b1001,
        A = 4'b1010,
        B = 4'b1011,
        C = 4'b1100,
        D = 4'b1101,
        E = 4'b1110,
        F = 4'b1111;

    // Always block for PlayerSpin assignment based on Clawk
    always @(posedge CLOCK_50 or posedge StopKey) begin
        if (StopKey)
            PlayerSpin <= ZERO; // Reset PlayerSpin on StopKey signal
        else begin
            case (Clawk)
                ZERO: PlayerSpin <= ZERO;
                ONE: PlayerSpin <= ONE;
                TWO: PlayerSpin <= TWO;
                THREE: PlayerSpin <= THREE;
                FOUR: PlayerSpin <= FOUR;
                FIVE: PlayerSpin <= FIVE;
                SIX: PlayerSpin <= SIX;
                SEVEN: PlayerSpin <= SEVEN;
                ATE: PlayerSpin <= ATE;
                NINE: PlayerSpin <= NINE;
                A: PlayerSpin <= A;
                B: PlayerSpin <= B;
                C: PlayerSpin <= C;
                D: PlayerSpin <= D;
                E: PlayerSpin <= E;
                F: PlayerSpin <= F;
                default: PlayerSpin <= ZERO;
            endcase
        end
    end

    // Separate always block for loadPlayerSpin assignment
    always @(posedge CLOCK_50) begin
        if (hot2 || hot3 || hot4)
            loadPlayerSpin <= PlayerSpin;
    end
endmodule

module hexadecimalDecoder(input [3:0] c, output [6:0] hex);

    wire [6:0] h;

    assign h[0] = (~c[2]&~c[0]) | (c[1]&c[2]) | (c[1]&~c[3]) | (c[0]&~c[3]&c[2]) | (~c[1]&~c[0]&c[3]) | (c[3]&~c[2]&~c[1]);
    assign h[1] = (~c[2] & ~c[0]) | (~c[3] & ~c[2]) | (~c[1] & c[0] & c[3]) | (~c[0] & ~c[1] & ~c[3]) | (c[1] & c[0] & ~c[3]);
    assign h[2] = (c[3] & ~c[2]) | (~c[3] & c[2]) | (c[0] & ~c[3]) | (~c[1] & ~c[3]) | (c[0] & ~c[1]);
    assign h[3] = (~c[1] & ~c[0] & c[3]) | (~c[0] & ~c[1] & ~c[2]) | (c[1] & ~c[2] & ~c[3]) | (c[0] & ~c[1] & c[2]) | (~c[0] & c[1] & c[2]) | (c[0] & c[1] & ~c[2]);
    assign h[4] = (~c[0] & ~c[2]) | (c[2] & c[3]) | (~c[0] & c[1]) | (c[1] & c[3]);
    assign h[5] = (~c[0] & ~c[1]) | (~c[2] & c[3]) | (c[1] & c[3]) | (~c[0] & c[1] & c[2]) | (~c[1] & c[2] & ~c[3]);
    assign h[6] = (~c[0] & c[1]) | (c[1] & ~c[2]) | (c[3] & ~c[2]) | (c[0] & c[3]) | (c[2] & ~c[1] & ~c[3]);

    assign hex = ~h;

endmodule
